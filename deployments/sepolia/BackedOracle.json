{
  "address": "0xD9671514C8A2D28e3dc5836B50707852DB40eE92",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "int256",
          "name": "current",
          "type": "int256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        }
      ],
      "name": "AnswerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "startedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        }
      ],
      "name": "NewRound",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int192",
          "name": "newAnswer",
          "type": "int192"
        },
        {
          "internalType": "uint32",
          "name": "newTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "newRound",
          "type": "uint32"
        }
      ],
      "name": "updateAnswer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdcf562385969e09ce35ccfe0d9e78dff8ae0f5c4aa5755093205f68adb6db73f",
  "receipt": {
    "to": null,
    "from": "0x6D2e19D49DCa81f20CA9f339B0e931a79d76A5E9",
    "contractAddress": "0xD9671514C8A2D28e3dc5836B50707852DB40eE92",
    "transactionIndex": 17,
    "gasUsed": "549654",
    "logsBloom": "0x
    "blockHash": "0x31ca9d8db94846246665247b56e7d305401130d86d3dbcbac789d0970114d216",
    "transactionHash": "0xdcf562385969e09ce35ccfe0d9e78dff8ae0f5c4aa5755093205f68adb6db73f",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 3891584,
        "transactionHash": "0xdcf562385969e09ce35ccfe0d9e78dff8ae0f5c4aa5755093205f68adb6db73f",
        "address": "0xD9671514C8A2D28e3dc5836B50707852DB40eE92",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006d2e19d49dca81f20ca9f339b0e931a79d76a5e9"
        ],
        "data": "0x",
        "logIndex": 25,
        "blockHash": "0x31ca9d8db94846246665247b56e7d305401130d86d3dbcbac789d0970114d216"
      }
    ],
    "blockNumber": 3891584,
    "cumulativeGasUsed": "7895970",
    "status": 1,
    "byzantium": true
  },
  "args": [
    18,
    "BackedOracle"
  ],
  "numDeployments": 1,
  "solcInputHash": "42fc755ad7706d16e8dad045c46f455b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int192\",\"name\":\"newAnswer\",\"type\":\"int192\"},{\"internalType\":\"uint32\",\"name\":\"newTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"newRound\",\"type\":\"uint32\"}],\"name\":\"updateAnswer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BackedFactory/BackedOracle.sol\":\"BackedOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BackedFactory/BackedOracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n  external\\n  view\\n  returns (\\n    uint80 roundId,\\n    int256 answer,\\n    uint256 startedAt,\\n    uint256 updatedAt,\\n    uint80 answeredInRound\\n  );\\n\\n  function latestRoundData()\\n  external\\n  view\\n  returns (\\n    uint80 roundId,\\n    int256 answer,\\n    uint256 startedAt,\\n    uint256 updatedAt,\\n    uint80 answeredInRound\\n  );\\n\\n}\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface\\n{\\n}\\n\\ncontract BackedOracle is AggregatorV2V3Interface, Ownable {\\n  struct RoundData {\\n    int192 answer;\\n    uint32 timestamp;\\n  }\\n\\n  uint8 private _decimals;\\n  string private _description;\\n\\n  mapping(uint256 => RoundData) private _roundData;\\n  uint80 private _latestRoundNumber;\\n\\n  constructor(uint8 decimals, string memory description) {\\n    _decimals = decimals;\\n    _description = description;\\n  }\\n\\n  function decimals() external view override returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  function description() external view override returns (string memory) {\\n    return _description;\\n  }\\n\\n  function latestAnswer() external view override returns (int256) {\\n    return _roundData[_latestRoundNumber].answer;\\n  }\\n\\n  function latestTimestamp() external view override returns (uint256) {\\n    return _roundData[_latestRoundNumber].timestamp;\\n  }\\n\\n  function latestRound() external view override returns (uint256) {\\n    return _latestRoundNumber;\\n  }\\n\\n  function getAnswer(uint256 roundId) external view override returns (int256) {\\n    return _roundData[roundId].answer;\\n  }\\n\\n  function getTimestamp(uint256 roundId) external view override returns (uint256) {\\n    return _roundData[roundId].timestamp;\\n  }\\n\\n  function updateAnswer(int192 newAnswer, uint32 newTimestamp, uint32 newRound) public onlyOwner {\\n    _roundData[newRound] = RoundData(newAnswer, newTimestamp);\\n    _latestRoundNumber = newRound;\\n\\n    emit AnswerUpdated(newAnswer, newRound, newTimestamp);\\n    emit NewRound(newRound, msg.sender, newTimestamp);\\n  }\\n\\n  function getRoundData(uint80 roundId) external view override returns (\\n    uint80,\\n    int256,\\n    uint256,\\n    uint256,\\n    uint80\\n  ) {\\n    require(_roundData[roundId].answer != 0, \\\"No data present\\\");\\n\\n    return (roundId, _roundData[roundId].answer, _roundData[roundId].timestamp, _roundData[roundId].timestamp, roundId);\\n  }\\n\\n  function latestRoundData() external view override returns (\\n    uint80,\\n    int256,\\n    uint256,\\n    uint256,\\n    uint80\\n  ) {\\n    require(_latestRoundNumber != 0, \\\"No data present\\\");\\n\\n    return (uint80(_latestRoundNumber), _roundData[_latestRoundNumber].answer, _roundData[_latestRoundNumber].timestamp, _roundData[_latestRoundNumber].timestamp, uint80(_latestRoundNumber));\\n  }\\n}\",\"keccak256\":\"0x4819f5bc16bd2b38e62c2bcdfb3652dc72d25c55e4ec6b01b065e72520f14d85\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000ab538038062000ab5833981016040819052620000349162000181565b6200003f3362000075565b6000805460ff60a01b1916600160a01b60ff85160217905580516200006c906001906020840190620000c5565b505050620002b8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054620000d3906200027b565b90600052602060002090601f016020900481019282620000f7576000855562000142565b82601f106200011257805160ff191683800117855562000142565b8280016001018555821562000142579182015b828111156200014257825182559160200191906001019062000125565b506200015092915062000154565b5090565b5b8082111562000150576000815560010162000155565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200019557600080fd5b825160ff81168114620001a757600080fd5b602084810151919350906001600160401b0380821115620001c757600080fd5b818601915086601f830112620001dc57600080fd5b815181811115620001f157620001f16200016b565b604051601f8201601f19908116603f011681019083821181831017156200021c576200021c6200016b565b8160405282815289868487010111156200023557600080fd5b600093505b828410156200025957848401860151818501870152928501926200023a565b828411156200026b5760008684830101525b8096505050505050509250929050565b600181811c908216806200029057607f821691505b60208210811415620002b257634e487b7160e01b600052602260045260246000fd5b50919050565b6107ed80620002c86000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063b633620c11610066578063b633620c14610207578063e849a2eb14610234578063f2fde38b14610247578063feaf968c1461025a57600080fd5b80638da5cb5b146101825780639a6fc8f51461019d578063b5ab58dc146101e457600080fd5b8063313ce567146100d457806350d25bcd146100f8578063668a0f0214610125578063715018a6146101365780637284e416146101405780638205bf6a14610155575b600080fd5b600054600160a01b900460ff1660405160ff90911681526020015b60405180910390f35b6003546001600160501b031660009081526002602052604090205460170b5b6040519081526020016100ef565b6003546001600160501b0316610117565b61013e610262565b005b610148610276565b6040516100ef9190610651565b6003546001600160501b0316600090815260026020526040902054600160c01b900463ffffffff16610117565b6000546040516001600160a01b0390911681526020016100ef565b6101b06101ab3660046106a6565b610308565b604080516001600160501b03968716815260208101959095528401929092526060830152909116608082015260a0016100ef565b6101176101f23660046106d6565b60009081526002602052604090205460170b90565b6101176102153660046106d6565b600090815260026020526040902054600160c01b900463ffffffff1690565b61013e610242366004610708565b6103a9565b61013e610255366004610753565b61049c565b6101b0610515565b61026a6105a7565b6102746000610601565b565b6060600180546102859061077c565b80601f01602080910402602001604051908101604052809291908181526020018280546102b19061077c565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b6001600160501b038116600090815260026020526040812054819081908190819060170b61036f5760405162461bcd60e51b815260206004820152600f60248201526e139bc819185d18481c1c995cd95b9d608a1b60448201526064015b60405180910390fd5b505050506001600160501b0382166000908152600260205260409020549192601783900b92600160c01b900463ffffffff16915081908490565b6103b16105a7565b604080518082018252601785900b80825263ffffffff8581166020808501828152878416600081815260028452889020965187549251909516600160c01b026001600160e01b03199092166001600160c01b0390951694909417179094556003805469ffffffffffffffffffff19168317905593519384529290917f0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f910160405180910390a360405163ffffffff83811682523391908316907f0109fc6f55cf40689f02fbaad7af7fe7bbac8a3d2186600afc7d3e10cac602719060200160405180910390a3505050565b6104a46105a7565b6001600160a01b0381166105095760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610366565b61051281610601565b50565b60035460009081908190819081906001600160501b031661056a5760405162461bcd60e51b815260206004820152600f60248201526e139bc819185d18481c1c995cd95b9d608a1b6044820152606401610366565b50506003546001600160501b03166000818152600260205260409020549094601782900b9450600160c01b90910463ffffffff1692508291508490565b6000546001600160a01b031633146102745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610366565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208083528351808285015260005b8181101561067e57858101830151858201604001528201610662565b81811115610690576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156106b857600080fd5b81356001600160501b03811681146106cf57600080fd5b9392505050565b6000602082840312156106e857600080fd5b5035919050565b803563ffffffff8116811461070357600080fd5b919050565b60008060006060848603121561071d57600080fd5b83358060170b811461072e57600080fd5b925061073c602085016106ef565b915061074a604085016106ef565b90509250925092565b60006020828403121561076557600080fd5b81356001600160a01b03811681146106cf57600080fd5b600181811c9082168061079057607f821691505b602082108114156107b157634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220512bec8cbee3df341018ec4a831f4964605241930455e08a2c0df3a5bbcfe9ec64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063b633620c11610066578063b633620c14610207578063e849a2eb14610234578063f2fde38b14610247578063feaf968c1461025a57600080fd5b80638da5cb5b146101825780639a6fc8f51461019d578063b5ab58dc146101e457600080fd5b8063313ce567146100d457806350d25bcd146100f8578063668a0f0214610125578063715018a6146101365780637284e416146101405780638205bf6a14610155575b600080fd5b600054600160a01b900460ff1660405160ff90911681526020015b60405180910390f35b6003546001600160501b031660009081526002602052604090205460170b5b6040519081526020016100ef565b6003546001600160501b0316610117565b61013e610262565b005b610148610276565b6040516100ef9190610651565b6003546001600160501b0316600090815260026020526040902054600160c01b900463ffffffff16610117565b6000546040516001600160a01b0390911681526020016100ef565b6101b06101ab3660046106a6565b610308565b604080516001600160501b03968716815260208101959095528401929092526060830152909116608082015260a0016100ef565b6101176101f23660046106d6565b60009081526002602052604090205460170b90565b6101176102153660046106d6565b600090815260026020526040902054600160c01b900463ffffffff1690565b61013e610242366004610708565b6103a9565b61013e610255366004610753565b61049c565b6101b0610515565b61026a6105a7565b6102746000610601565b565b6060600180546102859061077c565b80601f01602080910402602001604051908101604052809291908181526020018280546102b19061077c565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b6001600160501b038116600090815260026020526040812054819081908190819060170b61036f5760405162461bcd60e51b815260206004820152600f60248201526e139bc819185d18481c1c995cd95b9d608a1b60448201526064015b60405180910390fd5b505050506001600160501b0382166000908152600260205260409020549192601783900b92600160c01b900463ffffffff16915081908490565b6103b16105a7565b604080518082018252601785900b80825263ffffffff8581166020808501828152878416600081815260028452889020965187549251909516600160c01b026001600160e01b03199092166001600160c01b0390951694909417179094556003805469ffffffffffffffffffff19168317905593519384529290917f0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f910160405180910390a360405163ffffffff83811682523391908316907f0109fc6f55cf40689f02fbaad7af7fe7bbac8a3d2186600afc7d3e10cac602719060200160405180910390a3505050565b6104a46105a7565b6001600160a01b0381166105095760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610366565b61051281610601565b50565b60035460009081908190819081906001600160501b031661056a5760405162461bcd60e51b815260206004820152600f60248201526e139bc819185d18481c1c995cd95b9d608a1b6044820152606401610366565b50506003546001600160501b03166000818152600260205260409020549094601782900b9450600160c01b90910463ffffffff1692508291508490565b6000546001600160a01b031633146102745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610366565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208083528351808285015260005b8181101561067e57858101830151858201604001528201610662565b81811115610690576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156106b857600080fd5b81356001600160501b03811681146106cf57600080fd5b9392505050565b6000602082840312156106e857600080fd5b5035919050565b803563ffffffff8116811461070357600080fd5b919050565b60008060006060848603121561071d57600080fd5b83358060170b811461072e57600080fd5b925061073c602085016106ef565b915061074a604085016106ef565b90509250925092565b60006020828403121561076557600080fd5b81356001600160a01b03811681146106cf57600080fd5b600181811c9082168061079057607f821691505b602082108114156107b157634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220512bec8cbee3df341018ec4a831f4964605241930455e08a2c0df3a5bbcfe9ec64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3140,
        "contract": "contracts/BackedFactory/BackedOracle.sol:BackedOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5827,
        "contract": "contracts/BackedFactory/BackedOracle.sol:BackedOracle",
        "label": "_decimals",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 5829,
        "contract": "contracts/BackedFactory/BackedOracle.sol:BackedOracle",
        "label": "_description",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 5834,
        "contract": "contracts/BackedFactory/BackedOracle.sol:BackedOracle",
        "label": "_roundData",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(RoundData)5825_storage)"
      },
      {
        "astId": 5836,
        "contract": "contracts/BackedFactory/BackedOracle.sol:BackedOracle",
        "label": "_latestRoundNumber",
        "offset": 0,
        "slot": "3",
        "type": "t_uint80"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_int192": {
        "encoding": "inplace",
        "label": "int192",
        "numberOfBytes": "24"
      },
      "t_mapping(t_uint256,t_struct(RoundData)5825_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BackedOracle.RoundData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoundData)5825_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoundData)5825_storage": {
        "encoding": "inplace",
        "label": "struct BackedOracle.RoundData",
        "members": [
          {
            "astId": 5822,
            "contract": "contracts/BackedFactory/BackedOracle.sol:BackedOracle",
            "label": "answer",
            "offset": 0,
            "slot": "0",
            "type": "t_int192"
          },
          {
            "astId": 5824,
            "contract": "contracts/BackedFactory/BackedOracle.sol:BackedOracle",
            "label": "timestamp",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}